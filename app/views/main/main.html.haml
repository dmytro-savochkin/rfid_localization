%script
  - if @trilateration_map_data.present?
    trilateration_map_data = #{@trilateration_map_data.to_json.html_safe}
  $(document).ready(function() { startMainPlotting() })
  measurement_information = #{@mi[20][41].to_json.html_safe}
  algorithms = #{@algorithms.to_json.html_safe}

%pre
  = @algorithms.map{|k,v| [k, v.classifying_success]}.to_yaml

%h2 CDF and PDF.
.graph{:style => 'float:left;'}
  #cdf_div{:style => 'width:650px;height:400px;'}
    &nbsp;
.graph{:style => 'float:right;'}
  .pointer#pdf_div{:style => 'width:650px;height:400px;'}
    &nbsp;
.clear




%h2 Algorithms data.
- unless @tags_reads_by_antennae_count.nil?
  %table.bordered.wide
    %tr
      %th{:rowspan => 2} algorithm
      %th{:rowspan => 2} found
      %th{:colspan => 4} error, cm
      %th{:colspan => 2} x, cm
      %th{:colspan => 2} y, cm
      %th{:colspan => 17} best suited for antennae count, in tags
    %tr
      %th min
      %th mean
      %th stddev
      %th max
      %th mean
      %th stddev
      %th mean
      %th stddev
      %th all
      - max_antennae_count = max_antennae_count(@tags_reads_by_antennae_count)
      - (1..max_antennae_count).each do |antennae_count|
        %th= antennae_count


    - @algorithms.each do |algorithm_name, algorithm|
      %tr
        %td= algorithm_name.to_s + " (#{algorithm.reader_power.to_s})"
        %td= algorithm.map.length
        %td= algorithm.errors_parameters[:min]
        %td= algorithm.errors_parameters[:mean]
        %td= algorithm.errors_parameters[:stddev]
        %td= algorithm.errors_parameters[:max]

        %td= algorithm.estimates_parameters[:x][:mean]
        %td= algorithm.estimates_parameters[:x][:stddev]

        %td= algorithm.estimates_parameters[:y][:mean]
        %td= algorithm.estimates_parameters[:y][:stddev]

        %td= (algorithm.best_suited_for[:all] ).to_i.to_s
        - (1..max_antennae_count).each do |antennae_count|
          %td
            = (algorithm.best_suited_for[antennae_count] ).to_i.to_s
            = '(' + @tags_reads_by_antennae_count[algorithm.reader_power][antennae_count].to_s + ')'










- if @algorithms.values.select{|a|a.classifier}.length >= 1
  %h2 Classification algorithms.
  - unless @tags_reads_by_antennae_count.nil?
    %table.bordered
      %tr
        %th{:rowspan => 2} algorithm
        %th{:colspan => 6} zone errors
      %tr
        %th ok
        %th error
        %th misses
        %th success


      - @algorithms.select{|name, a|a.classifier}.each do |algorithm_name, algorithm|
        %tr
          %td= algorithm_name.to_s + " (#{algorithm.reader_power.to_s})"

          - if algorithm.classification_parameters.present?
            - zone_errors_types = %w(ok error not_found)
            - zone_errors_types.each do |type|
              %td= algorithm.classification_parameters[type.to_sym]
            %td= algorithm.classification_parameters[:success]










%div
  %h2 Joint estimates map. Tag:
  = render 'layouts/single_tag_map', :prefix => 'joint_estimates', :text_field => true


- if @trilateration_map_data.present?
  %div
    %h2 Trilateration color map. Tag:
    = render 'layouts/single_tag_map', :prefix => 'trilateration', :text_field => true

- if @algorithms.length >= 2
  %div
    %h2 Compare algorithms by error values (color maps).
    %div
      Green for bigger errors
      = select_tag_for_comparing_algorithms('algorithm_to_compare1', @algorithms)
    %div
      Red for bigger errors
      = select_tag_for_comparing_algorithms('algorithm_to_compare2', @algorithms, 1)
    = render 'layouts/single_tag_map', :prefix => 'comparing_algorithms', :text_field => false








%h2 Algorithms maps.





- @algorithms.each_with_index do |(algorithm_name, algorithm), index|
  - if algorithm.show_in_chart[:main]
    %div{:class => (if index.even? then 'left' else 'right' end)}
      %div
        %strong= algorithm_name.to_s
      %div
        mean error: #{algorithm.errors_parameters[:mean]} cm
      - chart_id = algorithm_name.to_s + '_map'
      %div.map.pointer{:id => chart_id}
        &nbsp;
    - if index.odd?
      .clear