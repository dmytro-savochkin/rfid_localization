%script
  - if @trilateration_map_data.present?
    trilateration_map_data = #{@trilateration_map_data.to_json.html_safe}
  $(document).ready(function() { startMainPlotting() })
  measurement_information = #{@mi[20][41].to_json.html_safe}
  algorithms = #{@algorithms.to_json.html_safe}



.graph{:style => 'float:left;'}
  #cdf_div{:style => 'width:650px;height:400px;'}
    &nbsp;
.graph{:style => 'float:right;'}
  #pdf_div{:style => 'width:650px;height:400px;'}
    &nbsp;

.graph{:style => 'float:right;display:none;'}
  #k_graph_div{:style => 'width:650px;height:300px;'}
    &nbsp;

%hr




- unless @tags_reads_by_antennae_count.nil?
  %table.bordered
    %tr
      %th{:rowspan => 2} algorithm
      %th{:rowspan => 2} found
      %th{:colspan => 4} error, cm
      %th{:colspan => 2} x, cm
      %th{:colspan => 2} y, cm
      %th{:colspan => 17} best suited for antennae count, in tags
    %tr
      %th min
      %th mean
      %th stddev
      %th max
      %th mean
      %th stddev
      %th mean
      %th stddev
      %th all
      - max_antennae_count = @tags_reads_by_antennae_count.values.map{|a| a.select{|k,v|v!=0}.keys.max}.max
      - (1..max_antennae_count).each do |antennae_count|
        %th= antennae_count


    - @algorithms.each do |algorithm_name, algorithm|
      %tr
        %td= algorithm_name.to_s + " (#{algorithm.reader_power.to_s})"
        %td= algorithm.map.length

        %td= algorithm.errors_parameters[:min]
        %td= algorithm.errors_parameters[:mean]
        %td= algorithm.errors_parameters[:stddev]
        %td= algorithm.errors_parameters[:max]

        %td= algorithm.estimates_parameters[:x][:mean]
        %td= algorithm.estimates_parameters[:x][:stddev]

        %td= algorithm.estimates_parameters[:y][:mean]
        %td= algorithm.estimates_parameters[:y][:stddev]

        %td= (algorithm.best_suited_for[:all] ).to_i.to_s
        - (1..max_antennae_count).each do |antennae_count|
          %td
            = (algorithm.best_suited_for[antennae_count] ).to_i.to_s
            = '(' + @tags_reads_by_antennae_count[algorithm.reader_power][antennae_count].to_s + ')'





%hr








= render 'layouts/single_tag_map', :prefix => 'joint_estimates', :name => 'Joint estimates map. Tag:'

- if @trilateration_map_data.present?
  = render 'layouts/single_tag_map', :prefix => 'trilateration', :name => 'Trilateration color map. Tag:'

= render 'layouts/single_tag_map', :prefix => 'comparing_ls_js', :name => 'Compare LS and JS. Power:'








%hr





- @algorithms.each_with_index do |(algorithm_name, algorithm), index|
  - if algorithm.show_in_chart[:main]
    %div{:class => (if index.even? then 'left' else 'right' end)}
      %div
        %strong= algorithm_name.to_s
      %div
        mean error: #{algorithm.errors_parameters[:mean]} cm
      - chart_id = algorithm_name.to_s + '_map'
      %div.map{:id => chart_id}
        &nbsp;
    - if index.odd?
      %div.clear