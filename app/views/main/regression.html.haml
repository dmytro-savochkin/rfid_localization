%script
  var deviations = #{@deviations.to_json.html_safe}
  var ellipse_ratios = #{@deviations.keys.to_json.html_safe}
  var max_degrees = #{@deviations.values.first.keys.to_json.html_safe}
  $(document).ready(function() { regressionDeviationsDistribution(deviations, #{(20..30).to_a}, ellipse_ratios, max_degrees) })



%table{:border => 1}
  -#- err = {}
  -#- [:ellipse1].each do |model_typee|
  -#  - err[model_typee] = {:by_one => [], :all => []}

  - data_to_header = @errors.select{|v| v[:height] == 41 and v[:reader_power] == 20}
  %tr
    %th{:colspan => 2}
    - data_to_header.each do |datum|
      %th{:colspan => 3}
        a_b:
        = datum[:ellipse_ratio].to_s
        %br
        degrees:
        = datum[:degrees_set].to_s
  - total = {}
  - correlation = {}
  - MI::Base::HEIGHTS.each do |height|
    - (20..30).each do |reader_power|
      %tr
        - data = @errors.select{|v| v[:height] == height and v[:reader_power] == reader_power}
        %th= height.to_s
        %th= reader_power.to_s
        - data.each_with_index do |datum, i|
          - total[i] ||= {}
          - correlation[i] ||= {}
          - [:by_one, :all].each do |antenna|
            - total[i][antenna] ||= []
            - correlation[i][antenna] ||= []
            - total[i][antenna].push datum[:with][antenna]
            - correlation[i][antenna].push datum[:correlation][antenna]
            %td
              = datum[:with][antenna].round(2).to_s
              %br
              = datum[:correlation][antenna].round(4).to_s
          %td
            -#= @models[reader_power][height][:all].to_s


          -#- err[model_type][:by_one].push @errors[height][reader_power][model_type][:by_one]
          -#- err[model_type][:all].push @errors[height][reader_power][model_type][:all]
          -#%th= @errors[height][reader_power][model_type][:by_one]
          -#%th= @errors[height][reader_power][model_type][:all]



  %tr
    %td
    %td
    - total.each_with_index do |(k, total_element), i|
      - [:by_one, :all].each do |antenna|
        %td
          = total_element[antenna].mean.round(2).to_s
          %br
          = correlation[i][antenna].mean.round(4).to_s
      %td








- if @deviations.present?
  %h2 data by height and antenna averaging

  %table{:border => 1}
    %tr
      %td
      - @deviations.keys.each do |ellipse_ratio|
        %th{:colspan => @deviations.values.first.keys.length * 2}= ellipse_ratio
    %tr
      %td
      - @deviations.keys.length.times do
        - @deviations.values.first.keys.each do |degrees_set|
          %th{:colspan => 2}= degrees_set.to_s


    - (20..30).each do |reader_power|
      - if @models.keys.include? reader_power
        %tr
        %th= reader_power
        - @deviations.each do |ellipse_ratio, deviations_data|
          - deviations_data.each do |max_degree, deviations|
            -#%td
            -#  = @models[reader_power][:all][:errors_with_regression].round(2).to_s
            -#  %br
            -#  = @models[reader_power][:all][:correlation].round(4).to_s
            %td
              mean
              = @deviations[ellipse_ratio][max_degree][reader_power].mean
              %br
              stddev
              = @deviations[ellipse_ratio][max_degree][reader_power].stddev
              %br
              normality
              = @deviations_normality[ellipse_ratio][max_degree][reader_power].to_s
            %td
              %table
                %tr
                  %td
                    %div{:style => 'width:500px;height:300px;', :id => 'deviations_graph_' + ellipse_ratio.to_f.to_s.gsub(/\./, '_') + '_' + max_degree.to_f.to_s.gsub(/\./, '_') + '_' + reader_power.to_s}
                      &nbsp;
