%script
  $(document).ready(function() { startMainPlotting() })
  work_zone = #{@algorithms.values.first[:work_zone].to_json.html_safe}
  algorithms = #{@algorithms.to_json.html_safe}
  -#algorithms = #{ Hash[@algorithms.except('cross_combiner').map {|k,v| b = {}; b[:map] = v.map; [k, b]}].to_json.html_safe }





-#%pre
-#  = @algorithms.values.map{|a| a[:classification_success]}.to_yaml



- if @algorithms.length >= 1
  %div
    %h2 Classification algorithms.
    %table.bordered
      -#%tr
      -#  %th{:rowspan => 3} algorithm
      -#  %th{:colspan => 21} success
      -#%tr
      -#  - (1..4).each do |test_height_number|
      -#    %th{:colspan => 5}= test_height_number.to_s
      -#%tr
      -#  - (1..4).each do |test_height_number|
      -#    %th self train
      -#    - ((1..4).to_a - [test_height_number]).each do |train_height_number|
      -#      %th= train_height_number.to_s + '-' + test_height_number.to_s
      -#    %th avg
      -#  %th total avg

      - if @algorithms.values.first[:map].present?
        %tr
          %th algorithm
          - @algorithms.values.first[:map].keys.length.times do |i|
            %th= i.to_s
          %th avg

        - @algorithms.except('cross_combiner').each do |algorithm_name, algorithm|
          %tr
            %td
              = algorithm_name.to_s
              - if algorithm[:reader_power].present?
                = " (#{algorithm[:reader_power].to_s})"

            - if algorithm[:classification_parameters].present?
              - success_sum = []
              - algorithm[:classification_parameters].each do |height_index, classification_parameters|
                %td= classification_parameters[:success]
                - success_sum.push classification_parameters[:success]
              %th= success_sum.mean.round(4)

    -#%table.bordered
    -#  %tr
    -#    %td= "cross"
    -#    - total_sum = []
    -#    - (0..3).each do |test_height_index|
    -#      - sum = []
    -#      - ((0..3).to_a - [test_height_index]).each do |train_height_index|
    -#        - ((0..3).to_a - [test_height_index, train_height_index]).each do |meta_train_height_index|
    -#          - sum.push @algorithms['cross_combiner'].classification_parameters[train_height_index][meta_train_height_index][test_height_index][:success]
    -#          %td
    -#            = train_height_index.to_s + '-' + meta_train_height_index.to_s + '-' + test_height_index.to_s + ': '
    -#            = @algorithms['cross_combiner'].classification_parameters[train_height_index][meta_train_height_index][test_height_index][:success]
    -#      - total_sum.push sum.mean
    -#      %th= sum.mean.round(4)
    -#    %th= total_sum.mean.round(4)





= render 'layouts/algorithm_heights_select_tag', :algorithms => @algorithms




- if @algorithms.length >= 2
  %div
    %h2 Compare algorithms by error values (color maps).
    %div
      Green for bigger errors
      = select_tag_for_comparing_algorithms('algorithm_to_compare1', @algorithms)
    %div
      Red for bigger errors
      = select_tag_for_comparing_algorithms('algorithm_to_compare2', @algorithms, 1)
    = render 'layouts/single_tag_map', :prefix => 'comparing_algorithms', :text_field => false










-#%table{:border=>1}
-#  %tr
-#    %td
-#    %td zone
-#    %td{:colspan=>(@algorithms['knn_combiner'].algorithms.length + 1)} train
-#    %td{:colspan=>(@algorithms['knn_combiner'].algorithms.length + 1)} test
-#  %tr
-#    %td
-#    %td
-#    - @algorithms['knn_combiner'].algorithms.each do |name, algorithm|
-#      %td= name.to_s
-#    %td answer
-#    - @algorithms['knn_combiner'].algorithms.each do |name, algorithm|
-#      %td= name.to_s
-#    %td answer
-#
-#  - TagInput.tag_ids.each do |tag_index|
-#    %tr
-#      %th= tag_index.to_s
-#      %th
-#        - if @algorithms['knn_combiner'].algorithms.values.first[:map][0][0][tag_index].present?
-#          = TagInput.from_point( @algorithms['knn_combiner'].algorithms.values.first[:map][0][0][tag_index][:position] ).nearest_antenna.number.to_s
-#
-#
-#      - [0, 1].each do |i|
-#        - @algorithms['knn_combiner'].algorithms.each do |name, algorithm|
-#          %td
-#            - if algorithm[:map][0][i][tag_index].present?
-#              = Antenna.number_from_point( algorithm[:map][0][i][tag_index][:estimate] ).to_s
-#        %th= Antenna.number_from_point( @algorithms['knn_combiner'].map[0][i][tag_index][:estimate] ).to_s





- if @algorithms.except('cross_combiner').values.first[:classification_parameters].present?
  %h2 Algorithms maps.

  - @algorithms.except('cross_combiner').each_with_index do |(algorithm_name, algorithm), index|
    %div{:class => (if index.even? then 'left' else 'right' end)}
      %div
        %strong= algorithm_name.to_s
      %div
        success: #{algorithm[:classification_parameters][0][:success]}
      - chart_id = algorithm_name.to_s + '_map'
      %div.map.pointer{:id => chart_id}
        &nbsp;
    - if index.odd?
      .clear